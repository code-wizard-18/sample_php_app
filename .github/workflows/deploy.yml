name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Set AWS credentials and region
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Login to AWS ECR
    - name: Login to ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1

    # Build Docker image
    - name: Build Docker Image
      run: |
        docker build -t sample-php-app .
        docker tag sample-php-app:latest ${{ steps.ecr-login.outputs.registry }}/sample-php-app:latest

    # Push image to ECR
    - name: Push to ECR
      run: |
        docker push ${{ steps.ecr-login.outputs.registry }}/sample-php-app:latest

    # Deploy to EC2
    - name: SSH and Deploy
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Ensure Docker is installed and running on EC2 instance
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo apt update && sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            newgrp docker
          fi
          
          # Run Docker commands as the updated user
          sudo -u $USER docker pull ${{ steps.ecr-login.outputs.registry }}/sample-php-app:latest
          sudo -u $USER docker stop php-app || true
          sudo -u $USER docker rm php-app || true
          sudo -u $USER docker run -d --name php-app -p 80:80 ${{ steps.ecr-login.outputs.registry }}/sample-php-app:latest
