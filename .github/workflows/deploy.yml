name: Deploy to AWS EC2 with Docker and Docker Compose

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set Docker Hub credentials
    - name: Set up DockerHub credentials
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Build Docker image
    - name: Build Docker Image
      run: |
        docker build -t sample-php-app .
        docker tag sample-php-app:latest ${{ secrets.DOCKER_USERNAME }}/sample-php-app:latest

    # Step 4: Push the Docker image to Docker Hub
    - name: Push Docker Image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/sample-php-app:latest

    # Step 5: Deploy to EC2 using SSH and Docker Compose
    - name: SSH and Deploy
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Ensure Docker and Docker Compose are installed on EC2 instance
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo apt update && sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose not found, installing..."
            sudo apt install -y python3-pip
            sudo pip3 install docker-compose
          fi

          # Add the user to the docker group to avoid needing sudo for docker commands
          sudo usermod -aG docker ubuntu
          newgrp docker

          # Pull the latest image from Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/sample-php-app:latest

          # Stop and remove any existing containers
          docker stop php-app || true
          docker rm php-app || true

          # Create a Docker Compose file dynamically or use an existing one
          echo "
          version: '3'
          services:
            php-app:
              image: ${{ secrets.DOCKER_USERNAME }}/sample-php-app:latest
              ports:
                - '80:80'
          " > docker-compose.yml

          # Run Docker Compose up to start the application
          docker-compose up -d
